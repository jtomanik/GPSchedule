//
//  RootViewController.swift
//  GPSchedule
//
//  Created by Jakub Tomanik on 08/03/2019.
//  Copyright Â© 2019 Jakub Tomanik. All rights reserved.
//

import Foundation
import UIKit
import RxSwift
import RxSwiftExt

// sourcery: store = RootStore
// sourcery: defaultState = "logIn"
class RootViewModel: ViewReactor {

    enum State: ViewState {
        case logIn
        case loggedIn
        case loading
        case error(Error)

        enum UserAction {}
    }

    // sourcery:inline:ViewReactor.common
        // Autogenerated content below, do not modify
        let store: RootStore
        let action = PublishSubject<State.UserAction>()
        let state = BehaviorSubject<State>(value: .logIn)
    
        required init(store: RootStore) {
            self.store = store
        }
    // sourcery:end
}

extension RootViewModel: ViewStateReducer {
    func reduce(state: State, action: State.UserAction) -> State {
        return state
    }
}

extension RootViewModel: ViewStateTransformer {
    func transform(store state: RootState) -> RootViewModel.State {
        return .loading
    }
}

// sourcery: viewmodel = "RootViewModel"
class RootViewController: UIViewController, AppView {

    // sourcery:inline:AppView.common
        // Autogenerated content below, do not modify
        private(set) var viewModel: RootViewModel
        private(set) var disposeBag = DisposeBag()
    
        required init(viewModel: RootViewModel) {
            self.viewModel = viewModel
            super.init(nibName: nil, bundle: nil)
        }
    
        required init?(coder aDecoder: NSCoder) {
            fatalError("init(coder:) has not been implemented")
        }
    // sourcery:end

    func setupView() {

    }

    func bindToViewModel() {
        viewModel.state
            .subscribe(
                weak: self,
                onNext: {
                    return $0.process
                },
                onError: { (_) -> (Error) -> Void in
                    fatalError("Unhandled error has occured")
                },
                onCompleted: { (_) -> () -> Void in
                    fatalError("Root state must not compleate while application is running")
                },
                onDisposed: { (_) -> () -> Void in
                    fatalError("Root state must not be disposed while application is running")
                })
            .disposed(by: disposeBag)
    }

    private func process(state: RootViewModel.State) {
        switch state {
        case .logIn:
            showLogInView()
        case .loggedIn:
            showLoggedInView()
        case .error(let error):
            showErrorView(error: error)
        case .loading:
            showLoadingView()
        }
    }

    private func showLogInView() {}
    private func showLoggedInView() {}
    private func showErrorView(error: Error) {}
    private func showLoadingView() {}
}
