{% for type in types.classes where type.name|contains:"ViewModel" %}
    {% if type.isGeneric == false %}
    {% set parent %}{{ type.inheritedTypes|join }}{% endset %}
    // sourcery:inline:auto:{{ type.name }}.AutoInit
// swiftlint:disable all
        {% if parent|contains:"Child" %}
convenience init(parent: RootViewModel) {
    self.init(parent: parent, transformer: {{ type.name }}.transform, reducer: {{ type.name }}.reduce)
}

required convenience init(parent: Parent, transformer: ViewStateTransformer<Store.State, State>?, reducer: ViewStateReducer<State>?) {
    self.init(warehouse: parent.warehouse, transformer: transformer, reducer: reducer)
    self.parent = parent
}

required init(warehouse: DomainStoreFacade, transformer: ViewStateTransformer<Store.State, State>?, reducer: ViewStateReducer<State>?) {
    super.init(warehouse: warehouse, transformer: transformer, reducer: reducer)
}
        {% else %}
convenience init(warehouse: DomainStoreFacade) {
    self.init(warehouse: warehouse, transformer: {{ type.name }}.transform, reducer: {{ type.name }}.reduce)
}

required init(warehouse: DomainStoreFacade, transformer: ViewStateTransformer<Store.State, State>?, reducer: ViewStateReducer<State>?) {
    super.init(warehouse: warehouse, transformer: transformer, reducer: reducer)
}
        {% endif %}
// swiftlint:enable all
    // sourcery:end
    {% endif %}
{% endfor %}
