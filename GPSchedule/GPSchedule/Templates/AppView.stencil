{% for type in types.implementing.AppView|annotated:"viewmodel" %}
// generating AppView for {{type.name}} with {{type.annotations.viewmodel}}
{% set inline_body %}
{{disclaimer}}
private(set) var viewModel: {{type.annotations.viewmodel}}
private(set) var disposeBag = DisposeBag()

required init(viewModel: {{type.annotations.viewmodel}}) {
    self.viewModel = viewModel
    super.init(nibName: nil, bundle: nil)
}

required init?(coder aDecoder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
}
{% endset %}
// sourcery:inline:{{ type.name }}.AppView
{{inline_body}}
// sourcery:end
{% set setup_body %}
override func viewDidLoad() {
    super.viewDidLoad()

    setupView()
    bindToViewModel()
}

func setupView() {

}

func bindToViewModel() {
    viewModel.state
        .subscribe(
            weak: self,
            onNext: { return $0.process },
            onError: { (_) -> (Error) -> Void in fatalError("Unhandled error has occured") },
            onCompleted: { (_) -> () -> Void in fatalError("Root state must not compleate while application is running") },
            onDisposed: { (_) -> () -> Void in fatalError("Root state must not be disposed while application is running") })
        .disposed(by: disposeBag)
}

{% for enum in types.enums %}
    {% if enum.parent.name == type.annotations.viewmodel %}
private func process(state: {{type.annotations.viewmodel}}.State) {
    switch state {
        {% for case in enum.cases %}
        case .{{case.name}}:
            return
        {% endfor %}
    }
}
    {% endif %}
{% endfor %}
{% endset %}
// sourcery:inline:{{ type.name }}.AppView.setup
{{setup_body}}
// sourcery:end

{% endfor %}
